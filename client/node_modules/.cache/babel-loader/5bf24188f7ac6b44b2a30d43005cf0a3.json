{"ast":null,"code":"var _jsxFileName = \"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './component/Jumbotron.js';\nimport TabBar from './component/TabBar.js';\nimport Footer from './component/Footer.js';\nimport axios from 'axios';\nimport lottery from './lottery.js';\nimport web3 from './web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      owner: '',\n      players: [],\n      balance: '',\n      value: '',\n      ethaddress: '',\n      loadingEnter: false,\n      loadingPick: false,\n      errorMessage: '',\n      successMessage: '',\n      otherNetwork: null\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault(); //making sure that the form doesn't attemp to submit itself in a classic html way\n\n      this.setState({\n        errorMessage: '',\n        sucessMessage: '',\n        loadingEnter: true\n      });\n\n      try {\n        if (parseFloat(this.state.value) < 0.011) {\n          throw Error('Please enter a greater than the specified minimum (0.1 Ether)');\n        }\n\n        const accounts = await web3.eth.getAccounts();\n        await lottery.methods.enter().send({\n          //for the current version of web3, we do have to mention from property while sending transaction\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, 'ether')\n        });\n        this.setState({\n          successMessage: \"Cheers! You've successfully entered into the lottery\",\n          loadingEnter: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (err.message === 'No \"from\" address specified in neither the given options, nor the default options.') {\n          err.message = 'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into Metamask.';\n        }\n\n        this.setState({\n          errorMessage: err.message,\n          loadingEnter: false\n        });\n      }\n    };\n\n    this.pickWinner = async () => {\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingPick: true\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n\n        if (accounts[0] !== this.state.owner) {\n          throw Error(\"You are NOT the manager of this lottery and therefore can't pick a winner\");\n        }\n\n        await lottery.methods.pickWinner().send({\n          from: accounts[0]\n        });\n        this.setState({\n          successMessage: 'Yay! A winner is picked.',\n          loadingPick: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (err.message === 'No \"from\" address specified in neither the given options, nor the default options.') {\n          err.message = 'Metamask (operating over Rinkeby n/w) is required to create campaign! Please check if you are signed into metamask.';\n        }\n\n        this.setState({\n          errorMessage: err.message,\n          loadingPick: false\n        });\n      }\n    };\n  }\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n    const network = await web3.eth.net.getNetworkType();\n\n    if (network !== 'rinkeby') {\n      this.setState({\n        otherNetwork: network\n      });\n    }\n\n    const owner = await lottery.methods.owner().call(); //we don't need configure call (putting the from property) as the provider that we hijacked\n    //from metamask has a default account (which is the first account we are logged into @Metamask)\n\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n    const ethaddress = await web3.eth.getAccounts(console.log);\n    this.setState({\n      owner,\n      players,\n      balance,\n      ethaddress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        owner: this.state.owner,\n        players: this.state.players,\n        balance: this.state.balance,\n        ethaddress: this.state.ethaddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js"],"names":["React","Component","Jumbotron","TabBar","Footer","axios","lottery","web3","App","state","owner","players","balance","value","ethaddress","loadingEnter","loadingPick","errorMessage","successMessage","otherNetwork","onSubmit","event","preventDefault","setState","sucessMessage","parseFloat","Error","accounts","eth","getAccounts","methods","enter","send","from","utils","toWei","getPlayers","call","getBalance","options","address","err","message","pickWinner","componentDidMount","network","net","getNetworkType","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Jumbotron from './component/Jumbotron.js';\nimport TabBar from './component/TabBar.js';\nimport Footer from './component/Footer.js';\n\nimport axios from 'axios';\nimport lottery from './lottery.js';\nimport web3 from './web3';\n\nclass App extends Component {\n\n  state = {\n    owner: '',\n    players: [],\n    balance: '',\n    value: '',\n    ethaddress:'',\n    loadingEnter: false,\n    loadingPick: false,\n    errorMessage: '',\n    successMessage: '',\n    otherNetwork: null,\n  };\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n      const network = await web3.eth.net.getNetworkType();\n      if (network !== 'rinkeby') {\n        this.setState({ otherNetwork: network });\n      }\n\n      const owner = await lottery.methods.owner().call();\n      //we don't need configure call (putting the from property) as the provider that we hijacked\n      //from metamask has a default account (which is the first account we are logged into @Metamask)\n      const players = await lottery.methods.getPlayers().call();\n      const balance = await web3.eth.getBalance(lottery.options.address);\n      const ethaddress = await web3.eth.getAccounts(console.log);\n\n      this.setState({ owner, players, balance, ethaddress });\n    } \n\n    onSubmit = async event => {\n      event.preventDefault(); //making sure that the form doesn't attemp to submit itself in a classic html way\n  \n      this.setState({\n        errorMessage: '',\n        sucessMessage: '',\n        loadingEnter: true\n      });\n  \n      try {\n        if (parseFloat(this.state.value) < 0.011) {\n          throw Error('Please enter a greater than the specified minimum (0.1 Ether)');\n        }\n  \n        const accounts = await web3.eth.getAccounts();\n  \n        await lottery.methods.enter().send({\n          //for the current version of web3, we do have to mention from property while sending transaction\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, 'ether')\n        });\n  \n        this.setState({\n          successMessage: \"Cheers! You've successfully entered into the lottery\",\n          loadingEnter: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (\n          err.message ===\n          'No \"from\" address specified in neither the given options, nor the default options.'\n        ) {\n          err.message =\n            'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into Metamask.';\n        }\n        this.setState({ errorMessage: err.message, loadingEnter: false });\n      }\n    };\n\n    //Pick Winner Function - enables ONLY the owner of the lottery to select the winner (Admin)\n    pickWinner = async () => {\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingPick: true\n      });\n  \n      try {\n        const accounts = await web3.eth.getAccounts();\n  \n        if (accounts[0] !== this.state.owner) {\n          throw Error(\n            \"You are NOT the manager of this lottery and therefore can't pick a winner\"\n          );\n        }\n  \n        await lottery.methods.pickWinner().send({\n          from: accounts[0]\n        });\n  \n        this.setState({\n          successMessage: 'Yay! A winner is picked.',\n          loadingPick: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (\n          err.message ===\n          'No \"from\" address specified in neither the given options, nor the default options.'\n        ) {\n          err.message =\n            'Metamask (operating over Rinkeby n/w) is required to create campaign! Please check if you are signed into metamask.';\n        }\n        this.setState({ errorMessage: err.message, loadingPick: false });\n      }\n    };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron\n        owner={this.state.owner}\n        players={this.state.players}\n        balance={this.state.balance}\n        ethaddress={this.state.ethaddress}\n         />\n          <TabBar />\n            <br />\n            <br />\n            <Footer>\n              <Footer />\n            </Footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}