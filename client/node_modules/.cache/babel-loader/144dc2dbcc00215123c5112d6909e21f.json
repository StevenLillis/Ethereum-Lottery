{"ast":null,"code":"var _jsxFileName = \"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './component/Jumbotron.js';\nimport TabBar from './component/TabBar.js';\nimport Footer from './component/Footer.js';\nimport axios from 'axios';\nimport lottery from './lottery.js';\nimport web3 from './web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      owner: '',\n      players: [],\n      balance: '',\n      value: '',\n      ethaddress: '',\n      loadingEnter: false,\n      loadingPick: false,\n      errorMessage: '',\n      sucessMessage: '',\n      otherNetwork: null\n    };\n  }\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n    const network = await web3.eth.net.getNetworkType();\n\n    if (network !== 'rinkeby') {\n      this.setState({\n        otherNetwork: network\n      });\n    }\n\n    const owner = await lottery.methods.owner().call(); //we don't need configure call (putting the from property) as the provider that we hijacked\n    //from metamask has a default account (which is the first account we are logged into @Metamask)\n\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n    const ethaddress = await web3.eth.getAccounts()[0];\n    this.setState({\n      owner,\n      players,\n      balance,\n      ethaddress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        owner: this.state.owner,\n        players: this.state.players,\n        balance: this.state.balance,\n        ethaddress: this.state.ethaddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js"],"names":["React","Component","Jumbotron","TabBar","Footer","axios","lottery","web3","App","state","owner","players","balance","value","ethaddress","loadingEnter","loadingPick","errorMessage","sucessMessage","otherNetwork","componentDidMount","network","eth","net","getNetworkType","setState","methods","call","getPlayers","getBalance","options","address","getAccounts","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AAEA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BQ,KAF0B,GAElB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,KAAK,EAAE,EAJD;AAKNC,MAAAA,UAAU,EAAC,EALL;AAMNC,MAAAA,YAAY,EAAE,KANR;AAONC,MAAAA,WAAW,EAAE,KAPP;AAQNC,MAAAA,YAAY,EAAE,EARR;AASNC,MAAAA,aAAa,EAAE,EATT;AAUNC,MAAAA,YAAY,EAAE;AAVR,KAFkB;AAAA;;AAeH,QAAjBC,iBAAiB,GAAG;AACxB;AACE,UAAMC,OAAO,GAAG,MAAMd,IAAI,CAACe,GAAL,CAASC,GAAT,CAAaC,cAAb,EAAtB;;AACA,QAAIH,OAAO,KAAK,SAAhB,EAA2B;AACzB,WAAKI,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAEE;AAAhB,OAAd;AACD;;AAED,UAAMX,KAAK,GAAG,MAAMJ,OAAO,CAACoB,OAAR,CAAgBhB,KAAhB,GAAwBiB,IAAxB,EAApB,CAPsB,CAQtB;AACA;;AACA,UAAMhB,OAAO,GAAG,MAAML,OAAO,CAACoB,OAAR,CAAgBE,UAAhB,GAA6BD,IAA7B,EAAtB;AACA,UAAMf,OAAO,GAAG,MAAML,IAAI,CAACe,GAAL,CAASO,UAAT,CAAoBvB,OAAO,CAACwB,OAAR,CAAgBC,OAApC,CAAtB;AACA,UAAMjB,UAAU,GAAG,MAAMP,IAAI,CAACe,GAAL,CAASU,WAAT,GAAuB,CAAvB,CAAzB;AAEA,SAAKP,QAAL,CAAc;AAAEf,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBC,MAAAA,OAAlB;AAA2BE,MAAAA;AAA3B,KAAd;AACD;;AAGHmB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,SAAD;AACA,QAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWC,KADlB;AAEA,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,OAFpB;AAGA,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,OAHpB;AAIA,QAAA,UAAU,EAAE,KAAKH,KAAL,CAAWK;AAJvB;AAAA;AAAA;AAAA;AAAA,cADF,eAOI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQM;AAAA;AAAA;AAAA;AAAA,cARN,eASM;AAAA;AAAA;AAAA;AAAA,cATN,eAUM,QAAC,MAAD;AAAA,+BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAlDyB;;AAqD5B,eAAeN,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Jumbotron from './component/Jumbotron.js';\nimport TabBar from './component/TabBar.js';\nimport Footer from './component/Footer.js';\n\nimport axios from 'axios';\nimport lottery from './lottery.js';\nimport web3 from './web3';\n\nclass App extends Component {\n\n  state = {\n    owner: '',\n    players: [],\n    balance: '',\n    value: '',\n    ethaddress:'',\n    loadingEnter: false,\n    loadingPick: false,\n    errorMessage: '',\n    sucessMessage: '',\n    otherNetwork: null,\n  };\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n      const network = await web3.eth.net.getNetworkType();\n      if (network !== 'rinkeby') {\n        this.setState({ otherNetwork: network });\n      }\n\n      const owner = await lottery.methods.owner().call();\n      //we don't need configure call (putting the from property) as the provider that we hijacked\n      //from metamask has a default account (which is the first account we are logged into @Metamask)\n      const players = await lottery.methods.getPlayers().call();\n      const balance = await web3.eth.getBalance(lottery.options.address);\n      const ethaddress = await web3.eth.getAccounts()[0];\n\n      this.setState({ owner, players, balance, ethaddress });\n    } \n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron\n        owner={this.state.owner}\n        players={this.state.players}\n        balance={this.state.balance}\n        ethaddress={this.state.ethaddress}\n         />\n          <TabBar />\n            <br />\n            <br />\n            <Footer>\n              <Footer />\n            </Footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}