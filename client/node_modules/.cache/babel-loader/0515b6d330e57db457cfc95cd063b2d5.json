{"ast":null,"code":"var _jsxFileName = \"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './component/jumbotron.js';\nimport TabBar from './component/tabBar.js';\nimport Footer from './component/footer.js';\nimport lottery from './lottery.js';\nimport web3 from './web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      owner: '',\n      players: [],\n      balance: '',\n      value: '',\n      ethaddress: '',\n      ethbalance: '',\n      loadingEnter: false,\n      loadingPick: false,\n      errorMessage: '',\n      successMessage: '',\n      otherNetwork: null\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingEnter: true\n      });\n\n      try {\n        if (parseFloat(this.state.value) < 0.01) {\n          throw Error('Please enter a greater than the specified minimum (0.01 Ether)');\n        }\n\n        const accounts = await web3.eth.getAccounts();\n        await lottery.methods.join().send({\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, 'ether')\n        });\n        this.setState({\n          successMessage: \"Cheers! You've been successfully entered into the lottery\",\n          loadingEnter: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (err.message === 'No \"from\" address specified in neither the given options, nor the default options.') {\n          err.message = 'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into Metamask.';\n        }\n\n        this.setState({\n          errorMessage: err.message,\n          loadingEnter: false\n        });\n      }\n    };\n\n    this.pickWinner = async () => {\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingPick: true\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n\n        if (accounts[0] !== this.state.owner) {\n          throw Error(\"You are NOT the manager of this lottery and therefore can't pick a winner\");\n        }\n\n        await lottery.methods.pickWinner().send({\n          from: accounts[0]\n        });\n        this.setState({\n          successMessage: 'Yay! A winner is picked.',\n          loadingPick: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (err.message === 'No \"from\" address specified in neither the given options, nor the default options.') {\n          err.message = 'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into metamask.';\n        }\n\n        this.setState({\n          errorMessage: err.message,\n          loadingPick: false\n        });\n      }\n    };\n  }\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n    const network = await web3.eth.net.getNetworkType();\n\n    if (network !== 'rinkeby') {\n      this.setState({\n        otherNetwork: network\n      });\n    }\n\n    const owner = await lottery.methods.owner().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n    const ethaddress = await web3.eth.getAccounts(console.log);\n    console.log(ethaddress);\n    const ethbalance = await web3.eth.getBalance(ethaddress.toString()).then(web3.utils.fromWei(result, \"ether\")); // console.log(ethbalance);\n    // const ethbalance = await web3.eth.getBalance(ethaddress.toString(), function(err, result) {\n    //   if (err) {\n    //     console.log(err)\n    //   } else {\n    //      console.log(web3.utils.fromWei(result, \"ether\"));\n    //   }\n    // });\n    //console.log(ethbalance);\n\n    console.log(ethbalance);\n    this.setState({\n      owner,\n      players,\n      balance,\n      ethaddress,\n      ethbalance\n    });\n  } //Sumbit Function - Allows participents to enter into the Lottery\n\n\n  render() {\n    let networkError = this.state.otherNetwork ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger z-depth-2 text-center animated fadeIn\",\n      role: \"alert\",\n      style: {\n        fontSize: '20px',\n        marginTop: '10px',\n        fontWeight: 'bold'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 mb-3\",\n        children: [\"You are on the\", ' ', /*#__PURE__*/_jsxDEV(\"u\", {\n          children: this.state.otherNetwork.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), \" network. At this moment in time, Lottery DApp operates only on the\", ' ', /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"Rinkeby\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), \" network. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 35\n        }, this), \"Therefore, in order to use the Lottery DApp, please switch the network in your Metamask extension to Rinkeby.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this) : null;\n    let errorAlert, successAlert;\n\n    if (this.state.errorMessage) {\n      errorAlert = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger mt-4 z-depth-2 text-center animated fadeIn\",\n        style: {\n          fontSize: '20px',\n          fontWeight: 'bold'\n        },\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Error: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (this.state.successMessage) {\n      successAlert = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success mt-4 z-depth-2 clearfix mb-5 text-center animated fadeIn\",\n        style: {\n          fontSize: '20px',\n          fontWeight: 'bold'\n        },\n        role: \"alert\",\n        children: this.state.successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n        owner: this.state.owner,\n        players: this.state.players,\n        balance: this.state.balance,\n        ethaddress: this.state.ethaddress,\n        ethbalance: this.state.ethbalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), errorAlert, \" \", successAlert, \" \", networkError, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(TabBar, {\n        onSubmit: this.onSubmit,\n        value: this.state.value,\n        loading: this.state.loadingEnter,\n        onChange: event => this.setState({\n          value: event.target.value\n        }),\n        loadingPick: this.state.loadingPick,\n        pickWinner: this.pickWinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js"],"names":["React","Component","Jumbotron","TabBar","Footer","lottery","web3","App","state","owner","players","balance","value","ethaddress","ethbalance","loadingEnter","loadingPick","errorMessage","successMessage","otherNetwork","onSubmit","event","preventDefault","setState","parseFloat","Error","accounts","eth","getAccounts","methods","join","send","from","utils","toWei","getPlayers","call","getBalance","options","address","err","message","pickWinner","componentDidMount","network","net","getNetworkType","console","log","toString","then","fromWei","result","render","networkError","fontSize","marginTop","fontWeight","toUpperCase","errorAlert","successAlert","target"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Jumbotron from './component/jumbotron.js';\nimport TabBar from './component/tabBar.js';\nimport Footer from './component/footer.js';\n\nimport lottery from './lottery.js';\nimport web3 from './web3';\n\nclass App extends Component {\n\n  state = {\n    owner: '',\n    players: [],\n    balance: '',\n    value: '',\n    ethaddress: '',\n    ethbalance: '',\n    loadingEnter: false,\n    loadingPick: false,\n    errorMessage: '',\n    successMessage: '',\n    otherNetwork: null,\n  };\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n      const network = await web3.eth.net.getNetworkType();\n      if (network !== 'rinkeby') {\n        this.setState({ otherNetwork: network });\n      }\n\n      const owner = await lottery.methods.owner().call();\n      const players = await lottery.methods.getPlayers().call();\n      const balance = await web3.eth.getBalance(lottery.options.address);\n      const ethaddress = await web3.eth.getAccounts(console.log);\n      console.log(ethaddress);\n      const ethbalance = await web3.eth.getBalance(ethaddress.toString()).then(web3.utils.fromWei(result, \"ether\"));\n      // console.log(ethbalance);\n      // const ethbalance = await web3.eth.getBalance(ethaddress.toString(), function(err, result) {\n      //   if (err) {\n      //     console.log(err)\n      //   } else {\n      //      console.log(web3.utils.fromWei(result, \"ether\"));\n      //   }\n      // });\n      //console.log(ethbalance);\n      console.log(ethbalance);\n\n      this.setState({ owner, players, balance, ethaddress, ethbalance });\n    } \n\n    //Sumbit Function - Allows participents to enter into the Lottery\n    onSubmit = async event => {\n      event.preventDefault();\n  \n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingEnter: true\n      });\n  \n      try {\n        if (parseFloat(this.state.value) < 0.01) {\n          throw Error('Please enter a greater than the specified minimum (0.01 Ether)');\n        }\n  \n        const accounts = await web3.eth.getAccounts();\n  \n        await lottery.methods.join().send({\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, 'ether')\n        });\n  \n        this.setState({\n          successMessage: \"Cheers! You've been successfully entered into the lottery\",\n          loadingEnter: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (\n          err.message ===\n          'No \"from\" address specified in neither the given options, nor the default options.'\n        ) {\n          err.message =\n            'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into Metamask.';\n        }\n        this.setState({ \n          errorMessage: err.message, \n          loadingEnter: false \n        });\n      }\n    };\n\n    //Pick Winner Function - enables ONLY the owner of the lottery to select the winner (Admin)\n    pickWinner = async () => {\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingPick: true\n      });\n  \n      try {\n        const accounts = await web3.eth.getAccounts();\n  \n        if (accounts[0] !== this.state.owner) {\n          throw Error(\n            \"You are NOT the manager of this lottery and therefore can't pick a winner\"\n          );\n        }\n  \n        await lottery.methods.pickWinner().send({\n          from: accounts[0]\n        });\n  \n        this.setState({\n          successMessage: 'Yay! A winner is picked.',\n          loadingPick: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (\n          err.message ===\n          'No \"from\" address specified in neither the given options, nor the default options.'\n        ) {\n          err.message =\n            'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into metamask.';\n        }\n        this.setState({ \n          errorMessage: err.message, \n          loadingPick: false \n        });\n      }\n    };\n    \n  render() {\n\n    let networkError = this.state.otherNetwork ? (\n      <div\n        className=\"alert alert-danger z-depth-2 text-center animated fadeIn\"\n        role=\"alert\"\n        style={{ fontSize: '20px', marginTop: '10px', fontWeight: 'bold' }}\n      >\n        <div className=\"mt-3 mb-3\">\n          You are on the{' '}\n          <u>{this.state.otherNetwork.toUpperCase()}</u> network. At\n          this moment in time, Lottery DApp operates only on the{' '}\n          <u>Rinkeby</u> network. <br />Therefore, in order to use the\n          Lottery DApp, please switch the network in your Metamask extension to\n          Rinkeby.\n        </div>\n      </div>\n    ) : null;\n\n    let errorAlert, successAlert;\n\n    if (this.state.errorMessage) {\n      errorAlert = (\n        <div\n          className=\"alert alert-danger mt-4 z-depth-2 text-center animated fadeIn\"\n          style={{ fontSize: '20px', fontWeight: 'bold' }}\n          role=\"alert\"\n        >\n          <strong>Error: </strong>\n          {this.state.errorMessage}\n        </div>\n      );\n    }\n\n    if (this.state.successMessage) {\n      successAlert = (\n        <div\n          className=\"alert alert-success mt-4 z-depth-2 clearfix mb-5 text-center animated fadeIn\"\n          style={{ fontSize: '20px', fontWeight: 'bold' }}\n          role=\"alert\"\n        >\n          {this.state.successMessage}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <Jumbotron\n        owner={this.state.owner}\n        players={this.state.players}\n        balance={this.state.balance}\n        ethaddress={this.state.ethaddress}\n        ethbalance={this.state.ethbalance}\n         />\n         {errorAlert} {successAlert} {networkError}\n         <br />\n          <TabBar\n          onSubmit={this.onSubmit}\n          value={this.state.value}\n          loading={this.state.loadingEnter}\n          onChange={event => this.setState({ value: event.target.value })}\n          loadingPick={this.state.loadingPick}\n          pickWinner={this.pickWinner}\n          />\n            <br />\n            <br />\n            <Footer>\n              <Footer />\n            </Footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}