[{"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/index.js":"1","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js":"2","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/reportWebVitals.js":"3","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/enter.js":"4","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/jumbotron.js":"5","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/manage.js":"6","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/tabBar.js":"7","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/instructions.js":"8","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/footer.js":"9","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/web3.js":"10","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Jumbotron.js":"11","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/TabBar.js":"12","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Footer.js":"13","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Manage.js":"14","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Enter.js":"15","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Instructions.js":"16","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/lottery.js":"17","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/FAQ.js":"18"},{"size":658,"mtime":1613423788415,"results":"19","hashOfConfig":"20"},{"size":6928,"mtime":1616194128010,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1613082743929,"results":"22","hashOfConfig":"20"},{"size":2275,"mtime":1616193767481,"results":"23","hashOfConfig":"20"},{"size":1980,"mtime":1616193866647,"results":"24","hashOfConfig":"20"},{"size":2118,"mtime":1616193900322,"results":"25","hashOfConfig":"20"},{"size":2929,"mtime":1616193911971,"results":"26","hashOfConfig":"20"},{"size":6186,"mtime":1615938091760,"results":"27","hashOfConfig":"20"},{"size":407,"mtime":1614714403903,"results":"28","hashOfConfig":"20"},{"size":693,"mtime":1616280541982,"results":"29","hashOfConfig":"20"},{"size":2375,"mtime":1614714419576,"results":"30","hashOfConfig":"20"},{"size":1917,"mtime":1614714472118,"results":"31","hashOfConfig":"20"},{"size":407,"mtime":1614714403903,"results":"32","hashOfConfig":"20"},{"size":1874,"mtime":1614714424750,"results":"33","hashOfConfig":"20"},{"size":2090,"mtime":1614714384153,"results":"34","hashOfConfig":"20"},{"size":5363,"mtime":1614714410727,"results":"35","hashOfConfig":"20"},{"size":2030,"mtime":1616194148727,"results":"36","hashOfConfig":"20"},{"size":2803,"mtime":1616193784165,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1drfltk",{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"40"},"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/index.js",[],["86","87"],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/App.js",["88","89"],"import React, { Component } from 'react';\nimport './App.css';\n\nimport Jumbotron from './component/jumbotron.js';\nimport TabBar from './component/tabBar.js';\nimport Footer from './component/footer.js';\n\nimport lottery from './lottery.js';\nimport web3 from './web3';\n\nclass App extends Component {\n\n  // State Management\n\n  state = {\n    owner: '',\n    players: [],\n    balance: '',\n    value: '',\n    ethaddress: '',\n    ethbalance: '',\n    loadingEnter: false,\n    loadingPick: false,\n    errorMessage: '',\n    successMessage: '',\n    otherNetwork: null\n  };\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n      const network = await web3.eth.net.getNetworkType();\n      if (network !== 'rinkeby') {\n        this.setState({ otherNetwork: network });\n      }\n\n      //Lottery Contract Calls\n      const owner = await lottery.methods.owner().call();\n      const players = await lottery.methods.getPlayers().call();\n      const balance = await web3.eth.getBalance(lottery.options.address);\n\n      //Metamask Account Address and Account Balance\n      const ethaddress = await web3.eth.getAccounts();\n      if(ethaddress.length == 0) { \n        ethaddress.push(\"0x1234567891234567891234567891234567891234\");\n        this.setState({\n          errorMessage: 'Please sign in through Metamask'\n        });\n      }\n      //Preventing Console Log Error (Dummy account Put in place, address is a invalid Metamask account with 0 Ether balance)\n      const ethbalance = await web3.eth.getBalance(ethaddress.toString(), function(err, result) {\n        if (err) {\n          console.log(err)\n        } else {\n          web3.utils.fromWei(result, \"ether\");\n        }\n      });\n\n      this.setState({ owner, players, balance, ethaddress, ethbalance });\n    } \n\n    //Sumbit Function - Allows participents to enter into the Lottery\n    onSubmit = async event => {\n      event.preventDefault();\n      \n      //Updating State\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingEnter: true\n      });\n  \n      //Validate User Input\n      try {\n        if (parseFloat(this.state.value) != 0.01) {\n          throw Error('Please enter the speciifed amount (0.01 Ether)');\n        }\n  \n        const accounts = await web3.eth.getAccounts();\n  \n        //Call Lottery.sol Join Function\n        await lottery.methods.join().send({\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, 'ether')\n        });\n\n        //Update State\n        this.setState({\n          successMessage: \"Cheers! You've been successfully entered into the lottery\",\n          loadingEnter: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (\n          err.message ===\n          'No \"from\" address specified in neither the given options, nor the default options.'\n        ) {\n          err.message =\n            'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into Metamask.';\n        }\n        this.setState({ \n          errorMessage: err.message, \n          loadingEnter: false \n        });\n      }\n    };\n\n    //Pick Winner Function - enables ONLY the owner of the lottery to select the winner (Admin)\n    pickWinner = async () => {\n      this.setState({\n        errorMessage: '',\n        successMessage: '',\n        loadingPick: true\n      });\n  \n      try {\n        const accounts = await web3.eth.getAccounts();\n  \n        //Validate Metamask account being used - is the account address equal to the onwers address?\n        if (accounts[0] !== this.state.owner) {\n          throw Error(\n            \"You are NOT the manager of this lottery and therefore can't pick a winner\"\n          );\n        }\n  \n        await lottery.methods.pickWinner().send({\n          from: accounts[0]\n        });\n  \n        this.setState({\n          successMessage: 'Yay! A winner is picked.',\n          loadingPick: false,\n          players: await lottery.methods.getPlayers().call(),\n          balance: await web3.eth.getBalance(lottery.options.address)\n        });\n      } catch (err) {\n        if (\n          err.message ===\n          'No \"from\" address specified in neither the given options, nor the default options.'\n        ) {\n          err.message =\n            'Metamask (operating over Rinkeby n/w) is required! Please check if you are signed into metamask.';\n        }\n        this.setState({ \n          errorMessage: err.message, \n          loadingPick: false \n        });\n      }\n    };\n    \n  render() {\n\n    //Network error message\n    let networkError = this.state.otherNetwork ? (\n      <div\n        className=\"alert alert-danger z-depth-2 text-center animated fadeIn\"\n        role=\"alert\"\n        style={{ fontSize: '20px', marginTop: '10px', fontWeight: 'bold' }}\n      >\n        <div className=\"mt-3 mb-3\">\n          You are on the{' '}\n          <u>{this.state.otherNetwork.toUpperCase()}</u> network. At\n          this moment in time, Lottery DApp operates only on the{' '}\n          <u>Rinkeby</u> network. <br />Therefore, in order to use the\n          Lottery DApp, please switch the network in your Metamask extension to\n          Rinkeby.\n        </div>\n      </div>\n    ) : null;\n\n    let errorAlert, successAlert;\n\n    //General Error Messaging\n    if (this.state.errorMessage) {\n      errorAlert = (\n        <div\n          className=\"alert alert-danger mt-4 z-depth-2 text-center animated fadeIn\"\n          style={{ fontSize: '20px', fontWeight: 'bold' }}\n          role=\"alert\"\n        >\n          <strong>Error: </strong>\n          {this.state.errorMessage}\n        </div>\n      );\n    }\n\n    //Success Messaging\n    if (this.state.successMessage) {\n      successAlert = (\n        <div\n          className=\"alert alert-success mt-4 z-depth-2 text-center animated fadeIn\"\n          style={{ fontSize: '20px', fontWeight: 'bold' }}\n          role=\"alert\"\n        >\n          <strong>Success: </strong>\n          {this.state.successMessage}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <Jumbotron\n        owner={this.state.owner}\n        players={this.state.players}\n        balance={this.state.balance}\n        ethaddress={this.state.ethaddress}\n        ethbalance={this.state.ethbalance}\n         />\n         {errorAlert} {successAlert} {networkError}\n         <br />\n          <TabBar\n          onSubmit={this.onSubmit}\n          value={this.state.value}\n          loading={this.state.loadingEnter}\n          onChange={event => this.setState({ value: event.target.value })}\n          loadingPick={this.state.loadingPick}\n          pickWinner={this.pickWinner}\n          />\n            <br />\n            <br />\n            <Footer>\n              <Footer />\n            </Footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/reportWebVitals.js",[],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/enter.js",["90"],"import React from 'react';\nimport '../index.css';\nimport Wheel from '../assets/wheel.svg';\nimport { Card, CardText, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\nimport { Spinner } from 'reactstrap';\n\n// Enter Card Component - Allowing participents to enter the Lottery\n\nconst Enter = ({loading, onSubmit, value, onChange }) => {\n    return (\n        <div>\n            <Card className=\"background-shadow\">\n                <CardBody>\n                    <CardTitle tag=\"h1\">Enter the ethereum lottery</CardTitle>\n                    <CardSubtitle tag=\"h3\" className=\"mb-2 text-muted\">Want to try your luck?</CardSubtitle>\n                </CardBody>\n                <div style={{ textAlign: 'center' }}>\n                    <img width=\"10%\" src={Wheel} alt=\"Card image cap\" />\n                </div>\n                <CardBody>\n                    <CardText tag=\"h4\">Amount of ether (0.01 Ether)</CardText>\n                    &emsp;\n                    <div className=\"md-form col-md-6 offset-md-3\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={value}\n                            placeholder=\"Enter ether amount\"\n                            onChange={onChange}\n                        />\n                        {/* Conditional Rendering Based on the value of the loading prop */}\n                        {loading ? (\n                        <div>\n                        <button\n                            className=\"btn btn-lg btn-primary mt-4 animated fadeIn button-weight\"\n                            disabled\n                        >\n                            <Spinner color=\"dark\" />  Entering...\n                        </button>{' '}\n                        </div>\n                            ) : (\n                            <button\n                            onClick={onSubmit}\n                            className=\"btn btn-lg btn-primary mt-4 animated fadeIn button-weight\"\n                            >\n                            Enter the Lottery\n                            </button>\n                        )}\n                    </div>\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\nexport default Enter;","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/jumbotron.js",["91"],"import React from 'react';\nimport '../index.css';\nimport Logo from '../assets/logo.png';\nimport { Jumbotron, Button } from 'reactstrap';\nimport { UncontrolledCollapse, CardBody, Card } from 'reactstrap';\nimport web3 from '../web3.js';\n\n//Jumbotron Component \n\nconst ReactJumbotron = ({owner, players, balance, ethaddress, ethbalance}) => {\n\n    return (\n        <Jumbotron className=\"background-colour\">\n            <h1 className=\"display-3\">Welcome To The Ethereum Lottery</h1>\n            <img src={Logo} alt=\"My logo\" className=\"rotate\" />\n            <br />\n            {/* Displaying Lottery Information */}\n            <h2 className=\"lead\">This Lottery is run and managed by <a href=\"https://rinkeby.etherscan.io/address/0x01f7b3f5ef19d1b2f87f1c0085e125166659431e\" target=\"_blank\">{owner}</a> </h2>\n            <br />\n            <h2 className=\"lead\">Currently, we have {players.length} entries, completing to win {web3.utils.fromWei(balance, 'ether')} Ether!</h2>\n            <br />\n            <hr className=\"my-2\" />\n            <br />\n            <p className=\"lead\">\n                &emsp;\n                        <Button tag=\"p\" color=\"primary\" id=\"toggler\" style={{ marginBottom: '1rem', width: '280px', height: '40px', fontSize: '0.9rem' }}>\n                    Account Information\n                        </Button>\n                <UncontrolledCollapse toggler=\"#toggler\">\n                    <Card className=\"background-colour\">\n                        {/* Account Information from Metamask */}\n                        <CardBody>\n                            Current Account: {ethaddress}\n                        </CardBody>\n                        <CardBody>\n                            Current Account Balance: {parseFloat(web3.utils.fromWei(ethbalance, \"ether\")).toFixed(3)} Ether\n                        </CardBody>\n                    </Card>\n                </UncontrolledCollapse>\n            </p>\n        </Jumbotron>\n    )\n}\n\nexport default ReactJumbotron;","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/manage.js",["92"],"import React from 'react';\nimport '../index.css';\nimport Ethereum from '../assets/ethereum.svg';\nimport { Card, CardText, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\nimport { Spinner } from 'reactstrap';\n\n//Manager Component - For Owner of the Lottery to pick winner\n\n//Only accessable by the owner of the lottery!\n\nconst Manage = ({loading, pickWinner}) => {\n    return (\n        <div>\n            <Card className=\"background-shadow\">\n                <CardBody>\n                    <CardTitle tag=\"h1\">Manage the lottery</CardTitle>\n                    <CardSubtitle tag=\"h3\" className=\"mb-2 text-muted\">Manager section only</CardSubtitle>\n                </CardBody>\n                <div style={{ textAlign: 'center' }}>\n                    <img width=\"10%\" src={Ethereum} alt=\"Card image cap\" />\n                </div>\n                &emsp;\n                <CardBody>\n                    <CardText tag=\"h4\">This section is specific to the manager of this Lottery.</CardText>\n                    <CardText tag=\"h4\">Any individual other then the manager would fail to pick a winner.</CardText>\n                    {/* Conditional Rendering Based on the value of the loading prop */}\n                        {loading ? (\n                            <div>\n                                <button\n                                    className=\"btn btn-lg btn-primary mt-4 animated fadeIn button-weight \"\n                                    disabled\n                                >\n                                     <Spinner color=\"dark\" />  Picking...\n                                </button>{' '}\n                            </div> ) : (\n                                <button\n                                    onClick={pickWinner}\n                                    className=\"btn btn-lg btn-primary mt-4 animated fadeIn button-weight \"\n                                >\n                                    Pick a Winner\n                                </button>\n                                    )}\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\nexport default Manage;","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/tabBar.js",["93","94","95","96"],"import React, { useState } from 'react';\nimport '../index.css';\nimport classnames from 'classnames';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Container, Col } from 'reactstrap';\nimport { animations } from 'react-animation';\nimport 'react-animation/dist/keyframes.css';\n\n\nimport Instruction from './instructions.js'\nimport Manage from './manage.js';\nimport Enter from './enter.js';\nimport Questions from './FAQ.js'\n\n//TabBar Component - Incorporates Components: Instruction, Manage, Enter & FAQ\n\nconst TabBar = ({onSubmit, value, loading, onChange, loadingPick, pickWinner}) => {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <div>\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '1' })}\n            onClick={() => { toggle('1'); }}\n            className=\"navlink-style\"\n          >\n            Enter Lottery\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '2' })}\n            onClick={() => { toggle('2'); }}\n            className=\"navlink-style\"\n          >\n            How To Play\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '3' })}\n            onClick={() => { toggle('3'); }}\n            className=\"navlink-style\"\n          >\n            Draw Lottery\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '4' })}\n            onClick={() => { toggle('4'); }}\n            className=\"navlink-style\"\n          >\n            FAQ\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <br />\n        <TabPane tabId=\"1\">\n          <Container style={{animation: animations.popIn}}>\n            <Col>\n              <Enter\n              onSubmit={onSubmit}\n              value={value}\n              loading={loading}\n              onChange={onChange}\n               />\n            </Col>\n          </Container>\n          <br />\n          <br />\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Instruction />\n          <br />\n          <br />\n        </TabPane>\n        <TabPane tabId=\"3\">\n        <Container style={{animation: animations.popIn}}>\n            <Col>\n              <Manage \n              loading={loadingPick}\n              pickWinner={pickWinner}\n              />\n            </Col>\n          </Container>\n          <br />\n          <br />\n        </TabPane>\n        <TabPane tabId=\"4\">\n        <Container style={{animation: animations.popIn}}>\n            <Col>\n              <Questions />\n            </Col>\n          </Container>\n          <br />\n        </TabPane>\n      </TabContent>\n    </div>\n  );\n}\n\nexport default TabBar;","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/instructions.js",["97","98","99","100"],"import React, {useState} from 'react';\nimport '../index.css';\nimport 'react-vertical-timeline-component/style.min.css';\nimport { GiPodiumWinner, GiCardPickup, GiTakeMyMoney } from \"react-icons/gi\";\nimport { RiArrowDropRightLine, RiAccountPinCircleFill } from \"react-icons/ri\";\nimport { MdNetworkCheck } from \"react-icons/md\";\nimport { GrPowerReset} from \"react-icons/gr\";\nimport { AiOutlineStop } from \"react-icons/ai\";\nimport { Timeline, TimelineItem }  from 'vertical-timeline-component-for-react';\n\n//Instruction Component\n\nconst Instruction = () => {\n\n    return (      \n        <Timeline lineColor={'#86bfee'}>\n  <TimelineItem\n    key=\"001\"\n    dateText={<RiAccountPinCircleFill />}\n    dateInnerStyle={{ background: '#86bfee', color: '#000' }}\n    bodyContainerStyle={{\n        background: '#fff',\n        padding: '20px',\n        borderRadius: '8px',\n        boxShadow: '0.5rem 0.5rem 2rem 0 rgba(0, 0, 0, 0.2)'\n      }}\n  >\n    <h2 className=\"weight\"><RiArrowDropRightLine />Installing Metamask</h2>\n    <br />\n    <p>\n        <ul> \n            <li className=\"weight\">\n            You must have <a href=\"https://metamask.io/download.html\" target=\"_blank\">MetaMask </a>  \n            installed with an account created &nbsp;\n            </li>\n            <br />\n            <li className=\"weight\">\n                The Metamask account must have a minimum balance of 0.01 Ether\n            </li>\n            <br />\n            <li className=\"weight\">\n                The Metamask account must have enough ether to cover the gas fee\n            </li>\n        </ul>\n    </p>\n  </TimelineItem>\n  <TimelineItem\n    key=\"002\"\n    dateText={<MdNetworkCheck />}\n    dateInnerStyle={{ background: '#86bfee', color: '#000' }}\n    bodyContainerStyle={{\n      background: '#fff',\n      padding: '20px',\n      borderRadius: '8px',\n      boxShadow: '0.5rem 0.5rem 2rem 0 rgba(0, 0, 0, 0.2)',\n    }}\n  >\n    <h2 className=\"weight\"><RiArrowDropRightLine />Metamask Network</h2>\n    <br />\n    <p>\n        <ul>\n            <li className=\"weight\">\n            Please ensure that you are connected to the <a href=\"https://www.rinkeby.io/#stats\" target=\"_blank\"> rinkeby test network </a>  \n            </li>\n            <br />\n            <li className=\"weight\">\n            Connecting to any network other than Rinekby will result in a error being thrown\n            </li>\n        </ul>\n    </p>\n  </TimelineItem>\n  <TimelineItem\n    key=\"003\"\n    dateText={<GiTakeMyMoney />}\n    dateInnerStyle={{ background: '#86bfee', color: '#000' }}\n    bodyContainerStyle={{\n      background: '#fff',\n      padding: '20px',\n      borderRadius: '8px',\n      boxShadow: '0.5rem 0.5rem 2rem 0 rgba(0, 0, 0, 0.2)',\n      className: 'weight'\n    }}\n  >\n    <h2 className=\"weight\"><RiArrowDropRightLine />Entering The Lottery</h2>\n    <br />\n    <p>\n        <ul>\n            <li className=\"weight\">\n            Participate by entering deposting 0.01 ether from  one of your accounts\n            </li>\n            <br />\n            <li className=\"weight\">\n                Please have enough money in your account to cover the gas fees also\n            </li>\n        </ul> \n    </p>\n  </TimelineItem>\n  <TimelineItem\n    key=\"004\"\n    dateText={<AiOutlineStop />}\n    dateInnerStyle={{ background: '#86bfee', color: '#000' }}\n    bodyContainerStyle={{\n      background: '#fff',\n      padding: '20px',\n      borderRadius: '8px',\n      boxShadow: '0.5rem 0.5rem 2rem 0 rgba(0, 0, 0, 0.2)',\n    }}\n  >\n    <h2 className=\"weight\"><RiArrowDropRightLine />Lottery Entry Limit</h2>\n    <br />\n    <p>\n        <ul>\n            <li className=\"weight\">\n            There is no limit, players may enter the lottery as many times as they wish\n            </li>\n            <br />\n            <li className=\"weight\">\n            The more times you enter, the better chance you have to win\n            </li>\n        </ul>\n    </p>\n  </TimelineItem>\n  <TimelineItem\n    key=\"005\"\n    dateText={<GiCardPickup />}\n    dateInnerStyle={{ background: '#86bfee', color: '#000' }}\n    bodyContainerStyle={{\n      background: '#fff',\n      padding: '20px',\n      borderRadius: '8px',\n      boxShadow: '0.5rem 0.5rem 2rem 0 rgba(0, 0, 0, 0.2)',\n    }}\n  >\n    <h2 className=\"weight\"><RiArrowDropRightLine />Selecting The Winner</h2>\n    <br />\n    <p>\n        <ul> \n            <li className=\"weight\">\n            Once a suitable number of people have entered, the lottery will be drawn\n            </li>\n            <br />\n            <li className=\"weight\">\n            This can only be done by the owner of the lottery dapp\n            </li>\n        </ul>\n    </p>\n  </TimelineItem>\n  <TimelineItem\n    key=\"006\"\n    dateText={<GiPodiumWinner />}\n    dateInnerStyle={{ background: '#86bfee', color: '#000' }}\n    bodyContainerStyle={{\n      background: '#fff',\n      padding: '20px',\n      borderRadius: '8px',\n      boxShadow: '0.5rem 0.5rem 2rem 0 rgba(0, 0, 0, 0.2)',\n    }}\n  >\n    <h2 className=\"weight\"><RiArrowDropRightLine />Winner Selected</h2>\n    <br />\n    <p>\n        <ul>\n            <li className=\"weight\">\n            Once the lottery has been drawn, the winner will recieve the entire lottery Jackpot.\n            </li>\n            <br />\n            <li className=\"weight\">\n            Winning amount may be reduced by gas fee as a result of the transaction\n            </li>\n        </ul> \n    </p>\n  </TimelineItem>\n  <TimelineItem\n    key=\"007\"\n    dateText={<GrPowerReset />}\n    dateInnerStyle={{ background: '#86bfee', color: '#000' }}\n    bodyContainerStyle={{\n      background: '#fff',\n      padding: '20px',\n      borderRadius: '8px',\n      boxShadow: '0.5rem 0.5rem 2rem 0 rgba(0, 0, 0, 0.2)',\n    }}\n  >\n    <h2 className=\"weight\"><RiArrowDropRightLine />Lottery Reset</h2>\n    <br />\n    <p>\n        <ul>\n            <li className=\"weight\">\n            Gamble Aware and be safe <br /><a href=\"https://www.begambleaware.org/\" target=\"_blank\"> when the fun stops, stop.</a> \n            </li>\n            <br />\n            <li className=\"weight\">\n            Please only gamble within your limits\n            </li>\n        </ul> \n    </p>\n  </TimelineItem>\n</Timeline>\n    )\n}\n\nexport default Instruction; ","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/footer.js",[],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/web3.js",[],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Jumbotron.js",["101","102"],"import React from 'react';\nimport '../index.css';\nimport Logo from '../assets/logo.png';\nimport { Jumbotron, Button } from 'reactstrap';\nimport { UncontrolledCollapse, CardBody, Card } from 'reactstrap';\nimport axios from 'axios';\nimport web3 from '../web3.js';\n\n//Jumbotron Component\n\n// axios orp\n\nconst ReactJumbotron = ({owner, players, balance, ethaddress}) => {\n\n    // componentDidMount() { \n    //     // Make a request for a user with a given ID\n    // axios.get('https://api-rinkeby.etherscan.io/api?module=account&action=balance&address=0x469e15f2c3c5481b8b10fc4f7644069f5c6cd2cf&tag=latest&apikey=URHX59UVIJNEDWBITMYYD869HJ1P2PRMIT')\n    // .then(function (response) {\n    // // handle success\n    // console.log(response);\n    // })\n    // .catch(function (error) {\n    // // handle error\n    // console.log(error);\n    // })\n    // .then(function () {\n    // // always executed\n    // });\n\n    return (\n        <Jumbotron className=\"background-colour\">\n            <h1 className=\"display-3\">Welcome To The Ethereum Lottery</h1>\n            <img src={Logo} alt=\"My logo\" />\n            <br />\n            <h2 className=\"lead\">This Lottery is run and managed by <a href=\"https://rinkeby.etherscan.io/address/0x01f7b3f5ef19d1b2f87f1c0085e125166659431e\" target=\"_blank\">{owner}</a> </h2>\n            <br />\n            <h2 className=\"lead\">Currently, we have {players.length} entries, completing to win {web3.utils.fromWei(balance, 'ether')} Ether!</h2>\n            <br />\n            <hr className=\"my-2\" />\n            <br />\n            <p className=\"lead\">\n                &emsp;\n                        <Button tag=\"p\" color=\"primary\" id=\"toggler\" style={{ marginBottom: '1rem', width: '280px', height: '40px', fontSize: '0.9rem' }}>\n                    Account Information\n                        </Button>\n                <UncontrolledCollapse toggler=\"#toggler\">\n                    <Card className=\"background-colour\">\n                        <CardBody>\n                            Current Account: {ethaddress}\n                                </CardBody>\n                        {/* <CardBody>\n                            Current Account Balance: [Amount] Ether\n                                </CardBody> */}\n                    </Card>\n                </UncontrolledCollapse>\n            </p>\n        </Jumbotron>\n    )\n}\n\nexport default ReactJumbotron;",["103","104"],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/TabBar.js",["105","106"],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Footer.js",[],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Manage.js",["107","108"],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Enter.js",["109","110"],"import React from 'react';\nimport '../index.css';\nimport Wheel from '../assets/wheel.svg';\nimport { Card, CardText, CardBody, CardTitle, CardSubtitle, Button } from 'reactstrap';\n\n// Enter Card Component\n\nconst Enter = ({loading, onSubmit, value, onChange }) => {\n    return (\n        <div>\n            <Card className=\"background-shadow\">\n                <CardBody>\n                    <CardTitle tag=\"h1\">Enter The Ethereum Lottery</CardTitle>\n                    <CardSubtitle tag=\"h3\" className=\"mb-2 text-muted\">Want To Try Your Luck?</CardSubtitle>\n                </CardBody>\n                <div style={{ textAlign: 'center' }}>\n                    <img width=\"10%\" src={Wheel} alt=\"Card image cap\" />\n                </div>\n                <CardBody>\n                    <CardText tag=\"h4\">Amount of Ether (Minimum 0.01 Ether)</CardText>\n                    &emsp;\n                    <div className=\"md-form col-md-6 offset-md-3\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value={value}\n                            placeholder=\"Enter Ether Amount\"\n                            onChange={onChange}\n                        />\n                        {loading ? (\n                        <div>\n                        <button\n                            className=\"btn btn-lg btn-primary mt-4 animated fadeIn button-weight\"\n                            disabled\n                        >\n                            Entering...\n                        </button>{' '}\n                        </div>\n                            ) : (\n                            <button\n                            onClick={onSubmit}\n                            className=\"btn btn-lg btn-primary mt-4 animated fadeIn button-weight\"\n                            >\n                            Enter the Lottery!\n                            </button>\n                        )}\n                    </div>\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\nexport default Enter;","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/Instructions.js",["111","112","113"],"import React from 'react';\nimport '../index.css';\nimport 'react-vertical-timeline-component/style.min.css';\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport { MdFilter1, MdFilter2, MdFilter3, MdFilter4, MdFilter5, MdFilter6, MdFilter7, MdFilter8, MdNavigateBefore, MdNavigateNext } from \"react-icons/md\";\n\n//Instruction Component\n\nconst Instruction = () => {\n    return (\n        <VerticalTimeline>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#86bfee', color: '#000' }}\n                iconStyle={{ background: '#86bfee', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter1 /> MetaMask</h3>\n                <p>\n                    Please ensure that you have <u><a href=\"https://metamask.io/download.html\" target=\"_blank\">MetaMask</a></u> installed and have an account created\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#86bfee', color: '#000' }}\n                iconStyle={{ background: '#86bfee', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter2 /> MetaMask Network</h3>\n                <p>\n                    Please ensure that you are connected to the <u><a href=\"https://www.rinkeby.io/#stats\" target=\"_blank\"> 'Rinkeby Test Network'</a></u>\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#86bfee', color: '#000' }}\n                iconStyle={{ background: '#86bfee', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter3 /> Entering The Lottery</h3>\n                <p>\n                    Participate in the Lottery by entering an amount creater than 0.01 Ether\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter4 /> Enter Limit</h3>\n                <p>\n                    Players may enter the Lottery <br /> as many times as they wish\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter5 /> Selecting A Winner</h3>\n                <p>\n                    Once a suitable number of people have entered, the Lottery will be drawn <br /> <u>(Only by the Owner)</u>\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter6 /> Winner Selected</h3>\n                <p>\n                    The winner will recieve the entire 'Lottery Pot' once he Lottery has been drawn\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter7 /> Lottery Reset</h3>\n                <p>\n                    Once the winner has been selected, <br />  a new Lottery will begin <br /> allowing players to play again\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter8 /> Best Of Luck</h3>\n                <p>\n                    Gamble Aware, be safe, <br /> <u><a href=\"https://www.begambleaware.org/\" target=\"_blank\"> When the fun stops. Stop. </a></u>\n                </p>\n            </VerticalTimelineElement>\n        </VerticalTimeline>\n    )\n}\n\nexport default Instruction; ","/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/lottery.js",[],"/Users/stevenlillis/Desktop/Ethereum-Lottery/client/src/component/FAQ.js",["114","115","116"],"import React from 'react';\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\n\n//Freq Asked Question Component\n\nconst Questions = () => { \n\n    return (\n        <ListGroup>\n          <ListGroupItem className=\"background-shadow\">\n            <ListGroupItemHeading tag=\"h2\">What do I need to play?</ListGroupItemHeading>\n            <br />\n            <ListGroupItemText style={{textAlign: 'center'}}>\n            Chrome, Metamask (Rinkeby Network) and one account with a minimum of 0.01 Ether exc. Fees\n            </ListGroupItemText>\n          </ListGroupItem>\n          <ListGroupItem className=\"background-shadow\">\n            <ListGroupItemHeading tag=\"h2\">Where is the source code?</ListGroupItemHeading>\n            <br />\n            <ListGroupItemText>\n            The Lottery DApp source code can be found <a href=\"https://rinkeby.etherscan.io/address/0x01f7b3f5ef19d1b2f87f1c0085e125166659431e\" target=\"_blank\">here</a> under 'Contract'\n            </ListGroupItemText>\n          </ListGroupItem>\n          <ListGroupItem className=\"background-shadow\">\n            <ListGroupItemHeading tag=\"h2\">Who has entered the Lottery?</ListGroupItemHeading>\n            <br />\n            <ListGroupItemText>\n            Everyone who has entered the Lottery can be found <a href=\"https://rinkeby.etherscan.io/address/0x01f7b3f5ef19d1b2f87f1c0085e125166659431e\" target=\"_blank\">here</a> under 'Transactions'\n            </ListGroupItemText>\n          </ListGroupItem>\n          <ListGroupItem className=\"background-shadow\">\n            <ListGroupItemHeading tag=\"h2\">How is the winner selected?</ListGroupItemHeading>\n            <br />\n            <ListGroupItemText>\n            The winner is selected based on a random number generated from Smart Contract code.\n            </ListGroupItemText>\n          </ListGroupItem>\n          <ListGroupItem className=\"background-shadow\">\n            <ListGroupItemHeading tag=\"h2\">Are there fees?</ListGroupItemHeading>\n            <br />\n            <ListGroupItemText>\n            Yes.  Every entry contains a small gas fee required to add a new block to the Blockchain.\n            </ListGroupItemText>\n          </ListGroupItem>\n          <ListGroupItem className=\"background-shadow\">\n            <ListGroupItemHeading tag=\"h2\">Will I be notified when a winner is picked?</ListGroupItemHeading>\n            <br />\n            <ListGroupItemText>\n            Unfortunately not.  However, you can see who has won based on the transctions found <a href=\"https://rinkeby.etherscan.io/address/0x01f7b3f5ef19d1b2f87f1c0085e125166659431e\" target=\"_blank\">here</a> \n            </ListGroupItemText>\n          </ListGroupItem>\n          <br/>\n          <br />\n        </ListGroup>\n      );\n}\n\nexport default Questions; \n\n",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":43,"column":28,"nodeType":"123","messageId":"124","endLine":43,"endColumn":30},{"ruleId":"121","severity":1,"message":"125","line":74,"column":42,"nodeType":"123","messageId":"124","endLine":74,"endColumn":44},{"ruleId":"126","severity":1,"message":"127","line":18,"column":21,"nodeType":"128","endLine":18,"endColumn":73},{"ruleId":"129","severity":1,"message":"130","line":18,"column":69,"nodeType":"128","endLine":18,"endColumn":175},{"ruleId":"126","severity":1,"message":"127","line":20,"column":21,"nodeType":"128","endLine":20,"endColumn":76},{"ruleId":"131","severity":1,"message":"132","line":30,"column":13,"nodeType":"133","endLine":30,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":39,"column":13,"nodeType":"133","endLine":39,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":48,"column":13,"nodeType":"133","endLine":48,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":57,"column":13,"nodeType":"133","endLine":57,"endColumn":38},{"ruleId":"134","severity":1,"message":"135","line":1,"column":16,"nodeType":"136","messageId":"137","endLine":1,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":33,"column":27,"nodeType":"128","endLine":33,"endColumn":87},{"ruleId":"129","severity":1,"message":"130","line":63,"column":57,"nodeType":"128","endLine":63,"endColumn":113},{"ruleId":"129","severity":1,"message":"130","line":189,"column":44,"nodeType":"128","endLine":189,"endColumn":101},{"ruleId":"134","severity":1,"message":"138","line":6,"column":8,"nodeType":"136","messageId":"137","endLine":6,"endColumn":13},{"ruleId":"129","severity":1,"message":"130","line":35,"column":69,"nodeType":"128","endLine":35,"endColumn":175},{"ruleId":"117","replacedBy":"139"},{"ruleId":"119","replacedBy":"140"},{"ruleId":"131","severity":1,"message":"132","line":26,"column":13,"nodeType":"133","endLine":26,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":35,"column":13,"nodeType":"133","endLine":35,"endColumn":38},{"ruleId":"134","severity":1,"message":"141","line":4,"column":61,"nodeType":"136","messageId":"137","endLine":4,"endColumn":67},{"ruleId":"126","severity":1,"message":"127","line":17,"column":21,"nodeType":"128","endLine":17,"endColumn":76},{"ruleId":"134","severity":1,"message":"141","line":4,"column":61,"nodeType":"136","messageId":"137","endLine":4,"endColumn":67},{"ruleId":"126","severity":1,"message":"127","line":17,"column":21,"nodeType":"128","endLine":17,"endColumn":73},{"ruleId":"129","severity":1,"message":"130","line":20,"column":52,"nodeType":"128","endLine":20,"endColumn":112},{"ruleId":"129","severity":1,"message":"130","line":31,"column":68,"nodeType":"128","endLine":31,"endColumn":124},{"ruleId":"129","severity":1,"message":"130","line":97,"column":54,"nodeType":"128","endLine":97,"endColumn":111},{"ruleId":"129","severity":1,"message":"130","line":21,"column":55,"nodeType":"128","endLine":21,"endColumn":161},{"ruleId":"129","severity":1,"message":"130","line":28,"column":63,"nodeType":"128","endLine":28,"endColumn":169},{"ruleId":"129","severity":1,"message":"130","line":49,"column":97,"nodeType":"128","endLine":49,"endColumn":203},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.",["142"],["143"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]