[{"/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/index.js":"1","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/App.js":"2","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/reportWebVitals.js":"3","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/lottery.js":"4","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/jumbotron.js":"5","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/tabBar.js":"6","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/footer.js":"7","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/web3.js":"8","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/instructions.js":"9","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/manage.js":"10","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/enter.js":"11"},{"size":658,"mtime":1614588430673,"results":"12","hashOfConfig":"13"},{"size":2226,"mtime":1614644082439,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1614588430674,"results":"15","hashOfConfig":"13"},{"size":2053,"mtime":1614644157046,"results":"16","hashOfConfig":"13"},{"size":2299,"mtime":1614639354724,"results":"17","hashOfConfig":"13"},{"size":1624,"mtime":1614636178960,"results":"18","hashOfConfig":"13"},{"size":407,"mtime":1614588430672,"results":"19","hashOfConfig":"13"},{"size":526,"mtime":1614634669991,"results":"20","hashOfConfig":"13"},{"size":5363,"mtime":1614588430672,"results":"21","hashOfConfig":"13"},{"size":1286,"mtime":1614588430673,"results":"22","hashOfConfig":"13"},{"size":4536,"mtime":1614643919063,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"z5qnas",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/index.js",[],["53","54"],"/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/App.js",["55","56"],"import React, { Component } from 'react';\nimport './App.css';\n\nimport Jumbotron from './component/jumbotron.js';\nimport TabBar from './component/tabBar.js';\nimport Footer from './component/footer.js';\n\nimport axios from 'axios';\nimport lottery from './lottery.js';\nimport web3 from './web3'; \nimport Web3 from 'web3'; \n\nclass App extends Component {\n\n  state = {\n    owner: '',\n    players: [],\n    balance: '',\n    value: '',\n    loadingEnter: false,\n    loadingPick: false,\n    errorMessage: '',\n    sucessMessage: '',\n    otherNetwork: null,\n  };\n\n  async componentDidMount() {\n    //runs only once, when the component is rendered to the screen for the first time\n      const network = await web3.eth.net.getNetworkType();\n      if (network !== 'rinkeby') {\n        this.setState({ otherNetwork: network });\n      }\n\n      const owner = await lottery.methods.owner().call();\n      //we don't need configure call (putting the from property) as the provider that we hijacked\n      //from metamask has a default account (which is the first account we are logged into @Metamask)\n      const players = await lottery.methods.getPlayers().call();\n      const balance = await web3.eth.getBalance(lottery.options.address);\n      let playerAddress;\n      let playerAccountBalance;\n      if (window.ethereum) { // using metamask\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        playerAddress = accounts[0];\n        const accountBalance = await window.ethereum.request({ method: 'eth_getBalance', params: [playerAddress]});\n        playerAccountBalance = web3.utils.fromWei(accountBalance, \"ether\")\n      }\n    \n      this.setState({ owner, players, balance, playerAddress, playerAccountBalance });\n    } \n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron\n        owner={this.state.owner}\n        players={this.state.players}\n        balance={this.state.balance}\n        playerAddress={this.state.playerAddress}\n        playerAccountBalance={this.state.playerAccountBalance}\n         />\n          <TabBar />\n            <br />\n            <br />\n            <Footer>\n              <Footer />\n            </Footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/reportWebVitals.js",[],"/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/lottery.js",[],"/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/jumbotron.js",["57"],"import React from 'react';\nimport '../index.css';\nimport Logo from '../assets/logo.png';\nimport { Jumbotron, Button } from 'reactstrap';\nimport { UncontrolledCollapse, CardBody, Card } from 'reactstrap';\nimport axios from 'axios';\nimport web3 from '../web3.js';\n\n//Jumbotron Component\n\n// axios orp\n\nconst ReactJumbotron = ({owner, players, balance, playerAddress, playerAccountBalance}) => {\n\n    // componentDidMount() { \n    //     // Make a request for a user with a given ID\n    // axios.get('https://api-rinkeby.etherscan.io/api?module=account&action=balance&address=0x469e15f2c3c5481b8b10fc4f7644069f5c6cd2cf&tag=latest&apikey=URHX59UVIJNEDWBITMYYD869HJ1P2PRMIT')\n    // .then(function (response) {\n    // // handle success\n    // console.log(response);\n    // })\n    // .catch(function (error) {\n    // // handle error\n    // console.log(error);\n    // })\n    // .then(function () {\n    // // always executed\n    // });\n\n    return (\n        <Jumbotron className=\"background-colour\">\n            <h1 className=\"display-3\">Welcome To The Ethereum Lottery</h1>\n            <img src={Logo} alt=\"My logo\" />\n            <br />\n            <h2 className=\"lead\">This Lottery is run and managed by {owner} </h2>\n            <br />\n            <h2 className=\"lead\">Currently, we have {players.length} entries, completing to win {web3.utils.fromWei(balance, 'ether')} Ether!</h2>\n            <br />\n            <hr className=\"my-2\" />\n            <br />\n            <p className=\"lead\">\n                &emsp;\n                        <Button tag=\"p\" color=\"primary\" id=\"toggler\" style={{ marginBottom: '1rem', width: '280px', height: '40px', fontSize: '0.9rem' }}>\n                    Account Information\n                        </Button>\n                <UncontrolledCollapse toggler=\"#toggler\">\n                    <Card className=\"background-colour\">\n                        <CardBody>\n                            Current Account: {playerAddress}\n                                </CardBody>\n                        <CardBody>\n                            Current Account Balance: {playerAccountBalance} Ether\n                                </CardBody>\n                    </Card>\n                </UncontrolledCollapse>\n            </p>\n        </Jumbotron>\n    )\n}\n\nexport default ReactJumbotron;","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/tabBar.js",["58","59"],"import React, { useState } from 'react';\nimport '../index.css';\nimport classnames from 'classnames';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Container, Col } from 'reactstrap';\n\nimport Instruction from './instructions.js'\nimport Manage from './manage.js';\nimport Enter from './enter.js';\n\n//TabBar Component - Incorporates Components: Instruction, Manage & Enter\n\nconst TabBar = () => {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <div>\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '1' })}\n            onClick={() => { toggle('1'); }}\n            className=\"navlink-style\"\n          >\n            Enter Lottery\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '2' })}\n            onClick={() => { toggle('2'); }}\n            className=\"navlink-style\"\n          >\n            How To Play\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <br />\n        <TabPane tabId=\"1\">\n          <Container>\n            <Col>\n              <Enter />\n            </Col>\n          </Container>\n          <Container>\n            <Col>\n              <Manage />\n            </Col>\n          </Container>\n          <br />\n          <br />\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Instruction />\n          <br />\n          <br />\n        </TabPane>\n      </TabContent>\n    </div>\n  );\n}\n\nexport default TabBar;","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/footer.js",[],"/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/web3.js",[],"/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/instructions.js",["60","61","62"],"import React from 'react';\nimport '../index.css';\nimport 'react-vertical-timeline-component/style.min.css';\nimport { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component';\nimport { MdFilter1, MdFilter2, MdFilter3, MdFilter4, MdFilter5, MdFilter6, MdFilter7, MdFilter8, MdNavigateBefore, MdNavigateNext } from \"react-icons/md\";\n\n//Instruction Component\n\nconst Instruction = () => {\n    return (\n        <VerticalTimeline>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#86bfee', color: '#000' }}\n                iconStyle={{ background: '#86bfee', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter1 /> MetaMask</h3>\n                <p>\n                    Please ensure that you have <u><a href=\"https://metamask.io/download.html\" target=\"_blank\">MetaMask</a></u> installed and have an account created\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#86bfee', color: '#000' }}\n                iconStyle={{ background: '#86bfee', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter2 /> MetaMask Network</h3>\n                <p>\n                    Please ensure that you are connected to the <u><a href=\"https://www.rinkeby.io/#stats\" target=\"_blank\"> 'Rinkeby Test Network'</a></u>\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#86bfee', color: '#000' }}\n                iconStyle={{ background: '#86bfee', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter3 /> Entering The Lottery</h3>\n                <p>\n                    Participate in the Lottery by entering an amount creater than 0.01 Ether\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter4 /> Enter Limit</h3>\n                <p>\n                    Players may enter the Lottery <br /> as many times as they wish\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter5 /> Selecting A Winner</h3>\n                <p>\n                    Once a suitable number of people have entered, the Lottery will be drawn <br /> <u>(Only by the Owner)</u>\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter6 /> Winner Selected</h3>\n                <p>\n                    The winner will recieve the entire 'Lottery Pot' once he Lottery has been drawn\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateBefore />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter7 /> Lottery Reset</h3>\n                <p>\n                    Once the winner has been selected, <br />  a new Lottery will begin <br /> allowing players to play again\n                </p>\n            </VerticalTimelineElement>\n            <VerticalTimelineElement\n                className=\"vertical-timeline-element--work\"\n                contentStyle={{ background: '#8FC1E3', color: '#000' }}\n                iconStyle={{ background: '#8FC1E3', color: '#fff' }}\n                icon={<MdNavigateNext />}\n            >\n                <h3 className=\"vertical-timeline-element-title weight\"> <MdFilter8 /> Best Of Luck</h3>\n                <p>\n                    Gamble Aware, be safe, <br /> <u><a href=\"https://www.begambleaware.org/\" target=\"_blank\"> When the fun stops. Stop. </a></u>\n                </p>\n            </VerticalTimelineElement>\n        </VerticalTimeline>\n    )\n}\n\nexport default Instruction; ","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/manage.js",["63"],"import React from 'react';\nimport '../index.css';\nimport Ethereum from '../assets/ethereum.svg';\nimport { Card, CardText, CardBody, CardTitle, CardSubtitle, Button } from 'reactstrap';\n\n//Manager Component\n\nconst Manage = () => {\n    return (\n        <div>\n            <Card className=\"background-shadow\">\n                <CardBody>\n                    <CardTitle tag=\"h1\">Manage The Lottery</CardTitle>\n                    <CardSubtitle tag=\"h3\" className=\"mb-2 text-muted\">Manager Section Only</CardSubtitle>\n                </CardBody>\n                <div style={{ textAlign: 'center' }}>\n                    <img width=\"10%\" src={Ethereum} alt=\"Card image cap\" />\n                </div>\n                &emsp;\n                <CardBody>\n                    <CardText tag=\"h4\">This Section Is Specific To The Manager Of This Lottery.</CardText>\n                    <CardText tag=\"h4\">Any Individual Other Then The Manager Would Fail To Pick.</CardText>\n                        <br />\n                    <Button tag=\"p\" color=\"primary\" style={{ marginBottom: '1rem', width: '220px', height: '40px', fontSize: '0.9rem' }}>\n                        Pick Winner\n                    </Button>\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\n\nexport default Manage;","/Users/emer.mcveigh/git/Ethereum-Lottery/client/src/component/enter.js",["64"],"import React from 'react';\nimport '../index.css';\nimport Wheel from '../assets/wheel.svg';\nimport { Card, CardText, CardBody, CardTitle, CardSubtitle, Button } from 'reactstrap';\nimport lottery from '../lottery.js';\nimport Web3 from 'web3'; \nimport web3 from '../web3'; \n\n// Enter Card Component\n\nconst Enter = () => {\n    return (\n        <div>\n            <Card className=\"background-shadow\">\n                <CardBody>\n                    <CardTitle tag=\"h1\">Enter The Ethereum Lottery</CardTitle>\n                    <CardSubtitle tag=\"h3\" className=\"mb-2 text-muted\">Want To Try Your Luck?</CardSubtitle>\n                </CardBody>\n                <div style={{ textAlign: 'center' }}>\n                    <img width=\"10%\" src={Wheel} alt=\"Card image cap\" />\n                </div>\n                <CardBody>\n                    <CardText tag=\"h4\">Amount of Ether (Minimum 0.01 Ether)</CardText>\n                    &emsp;\n                    <div className=\"md-form col-md-6 offset-md-3\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            value=\"\"\n                            placeholder=\"Enter Ether Amount\"\n                            onChange=\"\"\n                        />\n                        <br />\n                        <Button onClick={enterlottery} tag=\"p\" color=\"primary\" style={{ marginBottom: '1rem', width: '220px', height: '40px', fontSize: '0.9rem' }}>\n                            Enter Lottery\n                        </Button>\n                    </div>\n                </CardBody>\n            </Card>\n        </div>\n    )\n}\nasync function enterlottery() {\n    if (window.ethereum) { // using metamask\n        window.web3 = new Web3(window.ethereum);\n        window.contract = await new window.web3.eth.Contract([\n            {\n                \"constant\": false,\n                \"inputs\": [],\n                \"name\": \"join\",\n                \"outputs\": [],\n                \"payable\": true,\n                \"stateMutability\": \"payable\",\n                \"type\": \"function\"\n            },\n            {\n                \"constant\": false,\n                \"inputs\": [],\n                \"name\": \"pickWinner\",\n                \"outputs\": [],\n                \"payable\": false,\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"function\"\n            },\n            {\n                \"inputs\": [],\n                \"payable\": false,\n                \"stateMutability\": \"nonpayable\",\n                \"type\": \"constructor\"\n            },\n            {\n                \"constant\": true,\n                \"inputs\": [],\n                \"name\": \"getPlayers\",\n                \"outputs\": [\n                    {\n                        \"name\": \"\",\n                        \"type\": \"address[]\"\n                    }\n                ],\n                \"payable\": false,\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"constant\": true,\n                \"inputs\": [],\n                \"name\": \"owner\",\n                \"outputs\": [\n                    {\n                        \"name\": \"\",\n                        \"type\": \"address\"\n                    }\n                ],\n                \"payable\": false,\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            },\n            {\n                \"constant\": true,\n                \"inputs\": [\n                    {\n                        \"name\": \"\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                \"name\": \"players\",\n                \"outputs\": [\n                    {\n                        \"name\": \"\",\n                        \"type\": \"address\"\n                    }\n                ],\n                \"payable\": false,\n                \"stateMutability\": \"view\",\n                \"type\": \"function\"\n            }\n        ], lottery.options.address);\n  \n        const amount = web3.utils.toWei('0.011', 'ether');\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const playerAddress = accounts[0];\n        const lotteryJoin = await window.contract.methods.join().send({\n            from: playerAddress,\n            to: lottery.options.address,\n            value: amount,\n            gas: '1000000',\n        }, (error) => {\n        if (error) {\n            throw error\n        }\n        })\n        console.log(lotteryJoin)\n    }\n  }\n\nexport default Enter;",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":8,"column":8,"nodeType":"71","messageId":"72","endLine":8,"endColumn":13},{"ruleId":"69","severity":1,"message":"73","line":11,"column":8,"nodeType":"71","messageId":"72","endLine":11,"endColumn":12},{"ruleId":"69","severity":1,"message":"70","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":13},{"ruleId":"74","severity":1,"message":"75","line":26,"column":13,"nodeType":"76","endLine":26,"endColumn":38},{"ruleId":"74","severity":1,"message":"75","line":35,"column":13,"nodeType":"76","endLine":35,"endColumn":38},{"ruleId":"77","severity":1,"message":"78","line":20,"column":52,"nodeType":"79","endLine":20,"endColumn":112},{"ruleId":"77","severity":1,"message":"78","line":31,"column":68,"nodeType":"79","endLine":31,"endColumn":124},{"ruleId":"77","severity":1,"message":"78","line":97,"column":54,"nodeType":"79","endLine":97,"endColumn":111},{"ruleId":"80","severity":1,"message":"81","line":17,"column":21,"nodeType":"79","endLine":17,"endColumn":76},{"ruleId":"80","severity":1,"message":"81","line":20,"column":21,"nodeType":"79","endLine":20,"endColumn":73},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Web3' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]